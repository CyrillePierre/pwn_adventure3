#include <cstdio>
#include <cstring>
#include <map>
#include <dlfcn.h>

#include "gamelogic/player.h"
#include "preloader.h"

constexpr float fastSpeed = 20000.;
constexpr float runSpeed = 800.;

bool flyMode = false;

void cmd(char const * m, Player & player);


extern "C" {

void chat(Player * p, char const * msg) { 
	if(msg && *msg == '/') cmd(msg+1, *p);
	else shared::chat(p, msg);
}

bool canJump(Player*) { return true; }
char const* teamName(Player* p) { return shared::teamName(p); };
char const* playerName(Player* p) { return shared::playerName(p); };

float walkingSpeed(Player* p) {
//	return shared::walkingSpeed(p); 
	if(flyMode) {
		Vector3 vel{
			(float)(keyState(Key::D) - keyState(Key::Q)),
			(float)(keyState(Key::Z) - keyState(Key::S)),
			(float)(keyState(Key::A) - keyState(Key::E))
		};
		vel *= 200;
		printf("vel: {%7.1f%7.1f%7.1f}\n", vel.x, vel.y, vel.z);
		p->SetPosition(p->GetPosition() + vel);
		vel.z += 30;
		p->SetVelocity(vel);
	}
	return fastSpeed;
};

float sprintMultiplier(Player* /*p*/) {
//	return shared::sprintMultiplier(p); 
	return runSpeed / fastSpeed;
};

float jumpSpeed(Player* p) {
	if(flyMode) return 30;
	return shared::jumpSpeed(p);
};

void setSprintState(Player* p , bool state) {
	shared::setSprintState(p, state);
	p->m_jumpHoldTime = 1e10;
	if(state) p->m_jumpSpeed = 480;
	else p->m_jumpSpeed = 35;
}

void setJumpState(Player* p, bool state) {
	shared::setJumpState(p, state);
	if(state) flyMode = false;
	if(state && p->m_jumpSpeed < 100) p->SetVelocity(Vector3{});
}

bool isOnGround(Actor * a) {
	return shared::isOnGround(a);
}

}

void cmd(char const * m, Player & p) {
	char first[64];
	char rem[256];
	if(!sscanf(m, "%s%[^\n]", first, rem)) {
		perror("sscanf");
		printf("full cmd: %s\n", m);
		return;
	}
	printf("cmd: %s\n", first);

	if(!strcmp(first, "items")) {
		void * s = dlsym(RTLD_DEFAULT, "_ZL7g_items");
		if(!s) {
			perror("symbol 'g_items'");
			return;
		}
		printf("g_items (%p):\n", s);
		using Map = std::map<std::string, void*>;
		Map & items = *(Map*)s;
		for(auto const & item : items)
			printf("  %s\n", item.first.c_str());
	}

	else if(!strcmp(first, "info")) {
		printf("player: %p\n", &p);
		printf("health: %u\n", p.m_health);
		printf("mana: %u\n", p.m_mana);

		Vector3 pos = p.GetPosition();
		printf("position: {%9.1f%9.1f%9.1f}\n", pos.x, pos.y, pos.z);
		Vector3 vel = p.GetVelocity();
		printf("velocity: {%9.1f%9.1f%9.1f}\n", vel.x, vel.y, vel.z);
	}

	else if(!strcmp(first, "tp")) {
		Vector3 pos, vel;
		sscanf(rem, "%f%f%f", &pos.x, &pos.y, &pos.z);
		p.SetVelocity(vel);
		p.SetPosition(pos);
	}

	else if(!strcmp(first, "mv")) {
		Vector3 delta, vel;
		sscanf(rem, "%f%f%f", &delta.x, &delta.y, &delta.z);
		p.SetVelocity(vel);
		p.SetPosition(p.GetPosition() + delta);
	}

	else if(!strcmp(first, "freeze")) {
		p.m_jumpHoldTime = 1e10;
	}

	else if(!strcmp(first, "fly")) {
		flyMode = !flyMode;
		shared::setJumpState(&p, flyMode);
	}
}
