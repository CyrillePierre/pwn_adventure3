#include <cstdio>
#include <cstring>
#include <map>
#include <dlfcn.h>

constexpr float fastSpeed = 20000.;
constexpr float runSpeed = 800.;

bool fastMode = false;

void cmd(char const * m, void * player);

struct Player {
	bool CanJump();
	float GetJumpSpeed();
	float GetWalkingSpeed();
	float GetSprintMultiplier();
	void Chat(char const*);
};

struct Vector3 {
	float x;
	float y;
	float z;
};


bool Player::CanJump() { 
//	puts("Player::CanJump()");
	return true; 
}

float Player::GetJumpSpeed() {
	using FnPtr = float (*)(Player*);
	auto origFn = (FnPtr) dlsym(RTLD_NEXT, "_ZN6Player12GetJumpSpeedEv");
	float v = (*origFn)(this);
//	printf("jump speed : %f\n", v);
	return fastMode ? 5 * v : v;
}

float Player::GetWalkingSpeed() {
//	using FnPtr = float (*)(Player*);
//	auto origFn = (FnPtr) dlsym(RTLD_NEXT, "_ZN6Player15GetWalkingSpeedEv");
//	float v = (*origFn)(this);
//	printf("walking speed : %f\n", v);
	fastMode = true;
	return fastSpeed;
}

float Player::GetSprintMultiplier() {
//	using FnPtr = float (*)(Player*);
//	auto origFn = (FnPtr) dlsym(RTLD_NEXT, "_ZN6Player19GetSprintMultiplierEv");
//	float v = (*origFn)(this);
//	printf("sprint multiplier : %f\n", v);
	fastMode = false;
	return runSpeed / fastSpeed;
}

void Player::Chat(char const * msg) {
	if(msg && *msg == '/') cmd(msg+1, this);
	else {
		using FnPtr = void (*)(Player*, char const *);
		auto origFn = (FnPtr) dlsym(RTLD_NEXT, "_ZN6Player4ChatEPKc");
		origFn(this, msg);
	}
}

void cmd(char const * m, void * player) {
	char first[64];
	if(!sscanf(m, "%s", first)) {
		perror("sscanf");
		printf("full cmd: %s\n", m);
		return;
	}
	printf("cmd: %s\n", first);

	if(!strcmp(first, "items")) {
		void * s = dlsym(RTLD_DEFAULT, "_ZL7g_items");
		if(!s) {
			perror("symbol 'g_items'");
			return;
		}
		printf("g_items (%p):\n", s);
		using Map = std::map<std::string, void*>;
		Map & items = *(Map*)s;
		for(auto const & p : items)
			printf("  %s\n", p.first.c_str());
	}

	else if(!strcmp(first, "pos")) {
		Vector3 & pos = *(Vector3*)(((char*)player) + 120);
		printf("pos: [%10.2f,%10.2f,%10.2f]\n", pos.x, pos.y, pos.z);
	}
}
